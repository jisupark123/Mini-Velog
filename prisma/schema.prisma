// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum LoggedFrom {
  Kakao
  Naver
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  nickname     String     @default("")
  createdAt    DateTime   @default(now())
  avatar       String?
  introduction String     @default("반갑습니다")
  kakaoId      BigInt     @unique
  loggedFrom   LoggedFrom
  session      Session?
  posts        Post[]
  comments     Comment[]
}

model Session {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  sessionId String   @unique
}

model Post {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  title         String      @db.VarChar(50)
  subTitle      String      @db.VarChar(200)
  contents      String      @db.VarChar(10000)
  tags          Tag[]
  images        postImage[]
  likes         Int         @default(0) // 좋아요
  comments      Comment[] // 댓글
  showLikes     Boolean // 좋아요 표시 여부
  allowComments Boolean // 댓글 허용 여부

  @@index([userId])
}

model postImage {
  id      Int    @id @default(autoincrement())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  imageId String
}

model Tag {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  tag    String
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}
